"" Be considerate of system default vi on older Debians (-DTINY_VIMRC)
set nocompatible

"" Skip out when running ex, vi, vim.tiny, etc.
if !has('autocmd') || mode(1) ==# 'ce' | finish | endif

""      Config Dir {{{
if has('win32') && !has('nvim')
  let s:vim_home = expand('~/vimfiles/')
  let &pythonthreehome=expand('~/scoop/apps/python/current/')
elseif has('nvim')
  if has('win32')
    let s:vim_home = expand('~/AppData/Local/nvim/')
  else
    let s:vim_home = expand('~/.config/nvim/')
  endif
else
  let s:vim_home = expand('~/.vim/')
endif
if filereadable(expand(s:vim_home) . 'user.vim') | runtime user.vim | endif
" }}}

""      Plugin Setup {{{
let s:plug_vim_home = s:vim_home . 'autoload/plug.vim'

"" https://stackoverflow.com/q/50629106
if !filereadable(expand(s:plug_vim_home))
  exec 'silent !curl --ssl-no-revoke -sfLo ' .
       \ expand(s:plug_vim_home) .
       \ ' --create-dirs ' .
       \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  if filereadable(expand(s:plug_vim_home))
    augroup PlugVimInstalled
      autocmd VimEnter * echom
            \ '`plug.vim` now installed at ' .
            \ expand(s:vim_home) . 'autoload'
    augroup END
  endif
endif

call plug#begin(expand(s:vim_home . 'plugins'))

"" Some good colour schemes
Plug 'Lokaltog/vim-distinguished'
Plug 'sro5h/vim-darkspace'
" Plug 'tyrannicaltoucan/vim-deep-space'
" Plug 'yuttie/hydrangea-vim'
" Plug 'bcat/abbott.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'twerth/ir_black'

" Plug 'itchyny/lightline.vim'
Plug 'vim-airline/vim-airline'
Plug 'krcs/vim-movelines'

""
"" Language support
""
" apt install exuberant-ctags (<= stretch)
" apt install universal-ctags (buster)
" https://github.com/preservim/tagbar
Plug 'preservim/tagbar'

"" https://github.com/neoclide/coc.nvim
Plug 'neoclide/coc.nvim', {'branch': 'release'}

"" https://github.com/mg979/vim-visual-multi/blob/master/doc/vm-tutorial
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

"" reStructuredText editing, live previews
Plug 'previm/previm'
Plug 'tyru/open-browser.vim'

"" easily toggle line comments
Plug 'tpope/vim-commentary'

"" LISP and family
Plug 'vlime/vlime', {'rtp': 'vim/', 'for': 'lisp'}
Plug 'guns/vim-sexp', {'for': ['clojure', 'lisp', 'raket', 'scheme'] }
Plug 'tpope/vim-sexp-mappings-for-regular-people', {'for': ['clojure', 'lisp', 'raket', 'scheme'] }
Plug 'luochen1990/rainbow'

"" intelligent paren matching
"" requires rustc, cargo, and llvm
"" -- NOT FOR SLOW MACHINES! --
" Plug 'eraserhd/parinfer-rust', {'do': 'cargo build --release'}

"" Prolog syntax
Plug 'yochem/prolog.vim'

"" ARM assembly syntax
Plug 'ARM9/arm-syntax-vim'

"" MIPS assembly syntax
Plug 'benknoble/vim-mips'

"" seamless REPL jack-in, live evaluation
let s:supports_vim_iced = v:false
if filereadable(expand(s:plug_vim_home))
  if ((v:version >= 900 || v:version == 801 && has('patch614')) && !has('win32')) || has('nvim')
    let s:supports_vim_iced = v:true
  endif
if (s:supports_vim_iced)
  Plug 'liquidz/vim-iced', {'for': 'clojure'}
  Plug 'liquidz/vim-iced-coc-source', {'for': 'clojure'}
endif

"" Kotlin
" Plug 'udalov/kotlin-vim'

"" Rust
" Plug 'rust-lang/rust.vim'

"" F# syntax and FSI integration
Plug 'PhilT/vim-fsharp'

call plug#end()
endif
" }}}

""      Plugin Configuration  {{{
""
""" coc.nvim {{{
if (!empty(globpath(&rtp, 'plugins/coc.nvim', 0, 1)))
    " use <CR> to confirm completion
    " https://github.com/neoclide/coc.nvim/issues/4139
    inoremap <expr> <CR> coc#pum#visible() ? coc#_select_confirm() : '\<CR>'

    " https://github.com/neoclide/coc.nvim#example-vim-configuration
    function! Coc_ShowDocumentation()
      if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
      else
        call feedkeys('K', 'in')
      endif
    endfunction

    nnoremap <silent> [d <Plug>(coc-diagnostic-prev)
    nnoremap <silent> ]d <Plug>(coc-diagnostic-next)
    nnoremap <silent> gd <Plug>(coc-definition)
    nnoremap <silent> gy <Plug>(coc-type-definition)
    nnoremap <silent> gi <Plug>(coc-implementation)
    nnoremap <silent> gr <Plug>(coc-references)
    nnoremap <silent> [k :call Coc_ShowDocumentation()<CR>
    nnoremap <F2> <Plug>(coc-rename)

    " https://github.com/neoclide/coc.nvim/wiki/F.A.Q#the-selection-highlight-does-not-look-good
    augroup CocHighlights
      autocmd ColorScheme *
          \ hi QuickFixLine ctermbg=none |
          \ hi CocInfoHighlight ctermbg=000 |
          \ hi CocHintHighlight ctermbg=000 |
          \ hi CocWarningHighlight ctermbg=000 |
          \ hi CocErrorHighlight ctermbg=000
    augroup END
endif
""" }}}

""" vlime {{{
"" first install and configure quicklisp: https://www.quicklisp.org/beta/#loading
""
if (!empty(globpath(&rtp, 'plugins/vlime/lisp', 0, 1)))
    let g:vlime_cl_impl = 'clisp'
    function! VlimeBuildServerCommandFor_clisp(vlime_loader, vlime_eval)
        return [g:vlime_cl_impl,
                \ '-i', '~/quicklisp/setup.lisp',
                \ '-i', a:vlime_loader,
                \ '-x', a:vlime_eval,
                \ '-repl',
                \ '--quiet']
    endfunction
endif
" }}}

""" vim-iced {{{
""  requires `bb` in PATH: https://github.com/borkdude/babashka
""
if !empty(globpath(&rtp, 'plugins/vim-iced/bin/iced', 0, 1))
  func! s:getIcedExec() abort
    return fnamemodify(
    \   globpath(&rtp, 'plugins/vim-iced/bin/iced', 0, 1)[0],
    \ ':p')
  endfunc

  let s:iced_exec = s:getIcedExec()

  if s:supports_vim_iced && !empty(s:iced_exec)
    exec 'silent !\export PATH=$PATH:' . s:iced_exec
    let g:iced#repl#babashka_repl_type = 'nrepl'
    let g:iced_enable_default_key_mappings=v:true

    augroup VimIcedREPLAutoStart
        autocmd!
        au BufNewFile,BufRead *.clj,*.cljc IcedInstantConnect babashka
    augroup END
  endif
endif
" }}}

""" vim-fsharp {{{
""
" https://github.com/ionide/Ionide-vim/blob/master/autoload/fsharp.vim
if !empty(globpath(&rtp, 'ftplugin/fsharp.vim', 0, 1))
  augroup FsiConfig
    au FileType fsharp ++once
    \ :nnoremap <silent> <leader>l <ESC> :call user#launchTerm('dotnet fsi --load:' . user#quote(), 'F# Interactive')<CR>
  augroup END
endif
" }}}

""" previm {{{
""
let g:previm_enable_realtime=1
exe 'let g:previm_open_cmd="' . (!has('win32') ? 'xdg-open' : '' ) . '"'
" }}}

""" rainbow
""
let g:rainbow_active = 1

""" Tagbar
""
nmap <silent> <F12> :TagbarToggle<CR>

"" vim-movelines
nnoremap <silent> <A-DOWN> :call MoveLineNormal("d")<CR>
vnoremap <silent> <A-DOWN> :call MoveLinesVisual("down")<CR>

"" FORTH
augroup ForthConfig
    au VimEnter,BufReadPost *.*4,*.4th,*.forth,*.frt,*.fs,*.fth :setl ft=forth
    au FileType forth ++once
    \ :nnoremap <leader>l <ESC> :call user#launchTerm('gforth '. user#quote())<CR>
augroup END

"" Maxima
augroup MaximaConfig
    au VimEnter,BufNewFile,BufRead *.mac,*.mc,*.wxm :set ft=maxima
    au FileType maxima ++once
    \ nnoremap <silent> <leader>l <ESC> :call user#launchTerm('maxima --very-quiet -r "'.escape(join(readfile(user#esc())),'",\').'"')<CR> |
    \ nnoremap <silent> <leader>e <ESC> :echo system('maxima --very-quiet < '. user#quote())<CR>
augroup END

"" (Chez) Scheme
augroup SchemeConfig
    au FileType scheme ++once
    \ :nnoremap <C-L> <ESC> :call user#launchTerm('scheme '. user#quote())<CR>
augroup END

"" zig.vim
"" https://github.com/ziglang/zig.vim/issues/51
let g:zig_fmt_autosave = 0
" }}}

""      General Vim Settings {{{
set fileencodings=utf-8,latin1
set encoding=utf-8
scriptencoding utf-8

""" Window Behaviour
set wildmenu "show completions in status bar
set laststatus=2

"" https://thoughtbot.com/blog/vim-splits-move-faster-and-more-naturally
set splitbelow
set splitright

"" NETRW browser tweaks: https://www.youtube.com/watch?v=XA2WjJbmmoM
let g:netrw_banner=0
let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_liststyle=3
let g:netrw_keepdir = 0

"" https://shapeshed.com/vim-netrw/#changing-the-directory-view-in-netrw
let g:netrw_altv = 1
let g:netrw_winsize = 20

augroup EditorDefaults
  autocmd!
  let g:xml_syntax_folding = 1
  au FileType xml,html,xhtml :setlocal foldmethod=syntax   
  au VimEnter * if &filetype !=# 'gitcommit' | :Vexplore | :wincmd l | endif
  au BufRead,BufNewFile *.markdown,*.md,*.rst,*.textile,*.txt :setlocal spell
  au FileType gitcommit :setlocal spell | :set cc=50,72
  "" trim trailing space on save
  au BufWritePre * :%s/\s\+$//e
augroup END

""" Colours {{{
set background=dark
exe 'colorscheme ' . (index(getcompletion('', 'color'), 'habamax') > -1 ? 'habamax' : 'industry')

if g:colors_name !=# 'habamax' && index(getcompletion('', 'color'), 'ir_black') > -1
  colorscheme ir_black
elseif (v:version >= 800)
  set termguicolors "Switch off for WSL!
  if index(getcompletion('', 'color'), 'deep-space') > -1
    colorscheme deep-space
    let g:deepspace_italics=1
    let g:lightline = {'colorscheme': 'deepspace'}
  elseif index(getcompletion('', 'color'), 'darkspace') > -1
    colorscheme darkspace
    let g:darkspace_italics=1
    let g:airline_theme='darkspace'
    let g:airline_extensions = []
  else
    " colorscheme hydrangea
    " let g:lightline = { 'colorscheme': 'hydrangea' }
  endif
endif

"" https://stackoverflow.com/a/3316521
if has('gui_running')
  if has('gui_gtk2')
    set guifont=Inconsolata\ 12
  elseif has('gui_macvim')
    set guifont=Menlo\ Regular:h14
  elseif has('gui_win32')
    set guifont=Consolas:h11:cANSI
  endif
endif

set guicursor=n-v-c-sm:ver25,i-ci-ve:ver25,r-cr-o:hor20
" }}}

""" Editor {{{
syntax on
filetype plugin indent on
set nu
set hls
set spelllang=en_ca
set lcs+=space:Â·
"" https://github.com/vim/vim/blob/master/runtime/syntax/pascal.vim#L181
let g:pascal_fpc=1

""
"" From https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim
""
set shiftwidth=4 " 1 tab == 4 spcs
set tabstop=4
set expandtab " Render tabs as spaces
set smarttab
set ai " Auto indent
set si " Smart indent

set lbr
set tw=500 " break after 500 characters
set wrap " wrap lines

set noswapfile " keep source trees clean
" }}}

""" Key mappings {{{

"" Surround with quote: https://stackoverflow.com/a/2148055
nnoremap qw ciw'<C-r>"'<Esc>
nnoremap qqw ciw"<C-r>""<Esc>
nnoremap sw ciw(<C-r>")<Esc>
nnoremap swb ciw[<C-r>"]<Esc>
nnoremap swr ciw{<C-r>"}<Esc>

"" hide search matches: https://stackoverflow.com/a/657457
nnoremap <silent> <Space>h :noh<CR>
nnoremap <silent> <Space>s :w %<CR>

" clipboard copy/paste
vnoremap <silent> <C-C> <Esc>"*yv
nnoremap <silent> <C-V> <Esc>"*p<Esc>
inoremap <buffer> <C-V> <Esc>"*pa

"" Quick exit
tnoremap <silent> <Esc><Esc> <C-\><C-n> :wincmd k<CR>
nnoremap <silent> <F10> :set awa<CR>:qa<CR>
" }}}

set nocompatible&
" }}}
" vim: foldmethod=marker
